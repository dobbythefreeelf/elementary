=== modified file 'CMakeLists.txt'
--- CMakeLists.txt	2013-12-07 08:28:42 +0000
+++ CMakeLists.txt	2013-12-26 00:08:04 +0000
@@ -6,9 +6,10 @@
 
 project (slingshot)
 
+set (APPNAME "${CMAKE_PROJECT_NAME}-launcher")
 set (DATADIR "${CMAKE_INSTALL_PREFIX}/share")
-set (PKGDATADIR "${DATADIR}/slingshot")
-set (GETTEXT_PACKAGE "slingshot")
+set (PKGDATADIR "${DATADIR}/${CMAKE_PROJECT_NAME}")
+set (GETTEXT_PACKAGE "${CMAKE_PROJECT_NAME}")
 set (RELEASE_NAME "Donatello")
 set (VERSION "0.7.6.1")
 set (VERSION_INFO "Release")
@@ -34,7 +35,7 @@
 # Slingshot
 
 set (CORE_DEPS "gobject-2.0;glib-2.0;gio-2.0;gio-unix-2.0;gee-1.0;libgnome-menu;libwnck-3.0;gdk-x11-3.0;unity;")
-set (UI_DEPS "gtk+-3.0>=3.2.0;granite;zeitgeist-1.0;")
+set (UI_DEPS "gtk+-3.0>=3.2.0;granite;zeitgeist-2.0;")
 
 find_package (PkgConfig)
 pkg_check_modules (DEPS REQUIRED "${CORE_DEPS}${UI_DEPS}" gthread-2.0)
@@ -44,7 +45,7 @@
 ensure_vala_version ("0.15.1" MINIMUM)
 
 include (ValaPrecompile)
-vala_precompile (VALA_C
+vala_precompile (VALA_C ${APPNAME}
     src/Slingshot.vala
     src/SlingshotView.vala
     src/Settings.vala
@@ -66,7 +67,7 @@
 CUSTOM_VAPIS
     vapi/config.vapi
 OPTIONS
-	--thread
+    --thread
     -g
 )
 
@@ -77,11 +78,11 @@
 link_libraries (${DEPS_LIBRARIES})
 link_directories (${DEPS_LIBRARY_DIRS})
 
-add_executable (slingshot-launcher ${VALA_C})
-target_link_libraries(slingshot-launcher m)
+add_executable (${APPNAME} ${VALA_C})
+target_link_libraries(${APPNAME} m)
 
 # Installation
-install (TARGETS slingshot-launcher RUNTIME DESTINATION bin)
+install (TARGETS ${APPNAME} RUNTIME DESTINATION bin)
 install (FILES ${applications_menu} DESTINATION /etc/xdg/menus)
 
 #
=== added file 'cmake/FindGirCompiler.cmake'
--- cmake/FindGirCompiler.cmake	1970-01-01 00:00:00 +0000
+++ cmake/FindGirCompiler.cmake	2013-12-26 00:08:04 +0000
@@ -0,0 +1,56 @@
+##
+# Copyright 2009-2010 Jakob Westhoff. All rights reserved.
+# 
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions are met:
+# 
+#    1. Redistributions of source code must retain the above copyright notice,
+#       this list of conditions and the following disclaimer.
+# 
+#    2. Redistributions in binary form must reproduce the above copyright notice,
+#       this list of conditions and the following disclaimer in the documentation
+#       and/or other materials provided with the distribution.
+# 
+# THIS SOFTWARE IS PROVIDED BY JAKOB WESTHOFF ``AS IS'' AND ANY EXPRESS OR
+# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
+# EVENT SHALL JAKOB WESTHOFF OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+# 
+# The views and conclusions contained in the software and documentation are those
+# of the authors and should not be interpreted as representing official policies,
+# either expressed or implied, of Jakob Westhoff
+##
+
+##
+# Find module for the Gir compiler (g-ir-compiler)
+#
+# This module determines wheter a Gir compiler is installed on the current
+# system and where its executable is.
+#
+# Call the module using "find_package(GirCompiler) from within your CMakeLists.txt.
+#
+# The following variables will be set after an invocation:
+#
+#  G_IR_COMPILER_FOUND       Whether the g-ir-compiler compiler has been found or not
+#  G_IR_COMPILER_EXECUTABLE  Full path to the g-ir-compiler executable if it has been found
+##
+
+
+# Search for the g-ir-compiler executable in the usual system paths.
+find_program (G_IR_COMPILER_EXECUTABLE
+  NAMES g-ir-compiler)
+
+# Handle the QUIETLY and REQUIRED arguments, which may be given to the find call.
+# Furthermore set G_IR_COMPILER_FOUND to TRUE if the g-ir-compiler has been found (aka.
+# G_IR_COMPILER_EXECUTABLE is set)
+
+include (FindPackageHandleStandardArgs)
+find_package_handle_standard_args (GirCompiler DEFAULT_MSG G_IR_COMPILER_EXECUTABLE)
+
+mark_as_advanced (G_IR_COMPILER_EXECUTABLE)

=== added file 'cmake/Tests.cmake'
--- cmake/Tests.cmake	1970-01-01 00:00:00 +0000
+++ cmake/Tests.cmake	2013-12-26 00:08:04 +0000
@@ -0,0 +1,5 @@
+# Test macros for Marlin, feel free to re-use them.
+
+macro(add_test_executable EXE_NAME)
+    add_test(${EXE_NAME} gtester ${CMAKE_CURRENT_BINARY_DIR}/${EXE_NAME})
+endmacro()

=== modified file 'cmake/Translations.cmake' (properties changed: -x to +x)
--- cmake/Translations.cmake	2012-06-06 07:24:11 +0000
+++ cmake/Translations.cmake	2013-12-26 00:08:04 +0000
@@ -36,6 +36,7 @@
 
     add_custom_command (TARGET pot COMMAND
         ${XGETTEXT_EXECUTABLE} -d ${NLS_PACKAGE} -o ${CMAKE_CURRENT_SOURCE_DIR}/${NLS_PACKAGE}.pot
-        ${VALA_SOURCE} ${C_SOURCE} --keyword="_" --keyword="N_" --from-code=UTF-8
+        ${VALA_SOURCE} ${C_SOURCE} --add-comments="/" --keyword="_" --keyword="N_" --keyword="C_:1c,2"
+        --keyword="NC_:1c,2" --keyword="ngettext:1,2" --keyword="N_" --keyword="Q_:1g" --from-code=UTF-8
         )
 endmacro()

=== modified file 'cmake/ValaPrecompile.cmake'
--- cmake/ValaPrecompile.cmake	2011-09-07 10:52:19 +0000
+++ cmake/ValaPrecompile.cmake	2013-12-26 00:08:04 +0000
@@ -1,5 +1,6 @@
 ##
 # Copyright 2009-2010 Jakob Westhoff. All rights reserved.
+# Copyright 2012 elementary.
 # 
 # Redistribution and use in source and binary forms, with or without
 # modification, are permitted provided that the following conditions are met:
@@ -74,10 +75,18 @@
 #   be a header file as well as an internal header file being generated called
 #   <provided_name>.h and <provided_name>_internal.h
 #
+# GENERATE_GIR
+#   Have the compiler generate a GObject-Introspection repository file with
+#   name: <provided_name>.gir. This can be later used to create a binary typelib
+#   using the GI compiler.
+#
+# GENERATE_SYMBOLS
+#   Output a <provided_name>.symbols file containing all the exported symbols.
+# 
 # The following call is a simple example to the vala_precompile macro showing
 # an example to every of the optional sections:
 #
-#   vala_precompile(VALA_C
+#   vala_precompile(VALA_C mytargetname
 #       source1.vala
 #       source2.vala
 #       source3.vala
@@ -95,14 +104,19 @@
 #       myvapi
 #   GENERATE_HEADER
 #       myheader
+#   GENERATE_GIR
+#       mygir
+#   GENERATE_SYMBOLS
+#       mysymbols
 #   )
 #
 # Most important is the variable VALA_C which will contain all the generated c
 # file names after the call.
 ##
 
-macro(vala_precompile output)
-    parse_arguments(ARGS "PACKAGES;OPTIONS;DIRECTORY;GENERATE_HEADER;GENERATE_VAPI;CUSTOM_VAPIS" "" ${ARGN})
+macro(vala_precompile output target_name)
+    parse_arguments(ARGS "TARGET;PACKAGES;OPTIONS;DIRECTORY;GENERATE_GIR;GENERATE_SYMBOLS;GENERATE_HEADER;GENERATE_VAPI;CUSTOM_VAPIS" "" ${ARGN})
+
     if(ARGS_DIRECTORY)
         set(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/${ARGS_DIRECTORY})
     else(ARGS_DIRECTORY)
@@ -115,14 +129,29 @@
     endforeach(pkg ${ARGS_PACKAGES})
     set(in_files "")
     set(out_files "")
+    set(out_files_display "")
     set(${output} "")
+
     foreach(src ${ARGS_DEFAULT_ARGS})
-        list(APPEND in_files "${CMAKE_CURRENT_SOURCE_DIR}/${src}")
+        string(REGEX MATCH "^/" IS_MATCHED ${src})
+        if(${IS_MATCHED} MATCHES "/")
+            set(src_file_path ${src})
+        else()
+            set(src_file_path ${CMAKE_CURRENT_SOURCE_DIR}/${src})
+        endif()
+        list(APPEND in_files ${src_file_path})
         string(REPLACE ".vala" ".c" src ${src})
         string(REPLACE ".gs" ".c" src ${src})
-        set(out_file "${DIRECTORY}/${src}")
-        list(APPEND out_files "${DIRECTORY}/${src}")
+        if(${IS_MATCHED} MATCHES "/")
+            get_filename_component(VALA_FILE_NAME ${src} NAME)
+            set(out_file "${CMAKE_CURRENT_BINARY_DIR}/${VALA_FILE_NAME}")
+            list(APPEND out_files "${CMAKE_CURRENT_BINARY_DIR}/${VALA_FILE_NAME}")
+        else()
+            set(out_file "${DIRECTORY}/${src}")
+            list(APPEND out_files "${DIRECTORY}/${src}")
+        endif()
         list(APPEND ${output} ${out_file})
+        list(APPEND out_files_display "${src}")
     endforeach(src ${ARGS_DEFAULT_ARGS})
 
     set(custom_vapi_arguments "")
@@ -139,7 +168,8 @@
     set(vapi_arguments "")
     if(ARGS_GENERATE_VAPI)
         list(APPEND out_files "${DIRECTORY}/${ARGS_GENERATE_VAPI}.vapi")
-        set(vapi_arguments "--internal-vapi=${ARGS_GENERATE_VAPI}.vapi")
+        list(APPEND out_files_display "${ARGS_GENERATE_VAPI}.vapi")
+        set(vapi_arguments "--library=${ARGS_GENERATE_VAPI}" "--vapi=${ARGS_GENERATE_VAPI}.vapi")
 
         # Header and internal header is needed to generate internal vapi
         if (NOT ARGS_GENERATE_HEADER)
@@ -150,26 +180,69 @@
     set(header_arguments "")
     if(ARGS_GENERATE_HEADER)
         list(APPEND out_files "${DIRECTORY}/${ARGS_GENERATE_HEADER}.h")
-        list(APPEND out_files "${DIRECTORY}/${ARGS_GENERATE_HEADER}_internal.h")
-        list(APPEND header_arguments "--header=${DIRECTORY}/${ARGS_GENERATE_HEADER}.h")
-        list(APPEND header_arguments "--internal-header=${DIRECTORY}/${ARGS_GENERATE_HEADER}_internal.h")
+        list(APPEND out_files_display "${ARGS_GENERATE_HEADER}.h")
+        list(APPEND header_arguments "--header=${ARGS_GENERATE_HEADER}.h")
     endif(ARGS_GENERATE_HEADER)
 
-    add_custom_command(OUTPUT ${out_files} 
+    set(gir_arguments "")
+    set(gircomp_command "")
+    if(ARGS_GENERATE_GIR)
+        list(APPEND out_files "${DIRECTORY}/${ARGS_GENERATE_GIR}.gir")
+        list(APPEND out_files_display "${ARGS_GENERATE_GIR}.gir")
+        set(gir_arguments "--gir=${ARGS_GENERATE_GIR}.gir")
+
+        include (FindGirCompiler)
+        find_package(GirCompiler REQUIRED)
+        
+        set(gircomp_command 
+            COMMAND 
+                ${G_IR_COMPILER_EXECUTABLE}
+            ARGS 
+                "${DIRECTORY}/${ARGS_GENERATE_GIR}.gir"
+                -o "${DIRECTORY}/${ARGS_GENERATE_GIR}.typelib")
+    endif(ARGS_GENERATE_GIR)
+
+    set(symbols_arguments "")
+    if(ARGS_GENERATE_SYMBOLS)
+        list(APPEND out_files "${DIRECTORY}/${ARGS_GENERATE_SYMBOLS}.symbols")
+        list(APPEND out_files_display "${ARGS_GENERATE_SYMBOLS}.symbols")
+        set(symbols_arguments "--symbols=${ARGS_GENERATE_SYMBOLS}.symbols")
+    endif(ARGS_GENERATE_SYMBOLS)
+
+    # Workaround for a bug that would make valac run twice. This file is written
+    # after the vala compiler generates C source code.
+    set(OUTPUT_STAMP ${CMAKE_CURRENT_BINARY_DIR}/${target_name}_valac.stamp)
+        
+    add_custom_command(
+    OUTPUT
+        ${OUTPUT_STAMP}
     COMMAND 
         ${VALA_EXECUTABLE} 
     ARGS 
         "-C" 
         ${header_arguments} 
-        ${vapi_arguments}
+        ${vapi_arguments} 
+        ${gir_arguments} 
+        ${symbols_arguments} 
         "-b" ${CMAKE_CURRENT_SOURCE_DIR} 
         "-d" ${DIRECTORY} 
         ${vala_pkg_opts} 
         ${ARGS_OPTIONS} 
         ${in_files} 
         ${custom_vapi_arguments}
+    COMMAND
+        touch
+    ARGS
+        ${OUTPUT_STAMP}
     DEPENDS 
         ${in_files} 
         ${ARGS_CUSTOM_VAPIS}
+    COMMENT
+        "Generating ${out_files_display}"
+    ${gircomp_command}
     )
+
+    # This command will be run twice for some reason (pass a non-empty string to COMMENT
+    # in order to see it). Since valac is not executed from here, this won't be a problem.
+    add_custom_command(OUTPUT ${out_files} DEPENDS ${OUTPUT_STAMP} COMMENT "")
 endmacro(vala_precompile)

=== modified file 'po/CMakeLists.txt'
--- po/CMakeLists.txt	2011-09-12 14:23:59 +0000
+++ po/CMakeLists.txt	2013-12-26 00:08:04 +0000
@@ -1,8 +1,6 @@
 # Translations
 include (Translations)
-add_translations_directory ("slingshot")
-add_translations_catalog ("slingshot"
-    ../src/Widgets
-    ../src/Backend
+add_translations_directory (${GETTEXT_PACKAGE})
+add_translations_catalog (${GETTEXT_PACKAGE}
     ../src
-)
+)
\ No newline at end of file

=== modified file 'src/Backend/App.vala'
--- src/Backend/App.vala	2013-08-26 17:11:46 +0000
+++ src/Backend/App.vala	2013-12-26 00:08:04 +0000
@@ -16,143 +16,139 @@
 //  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 //
 
-namespace Slingshot.Backend {
-
-    public class App : Object {
-
-        public string name { get; construct set; }
-        public string description { get; private set; default = ""; }
-        public string desktop_id { get; construct set; }
-        public string exec { get; private set; }
-        public string icon_name { get; private set; default = ""; }
-        public string[] keywords { get; private set;}
-        public Gdk.Pixbuf icon { get; private set; }
-        public double popularity { get; set; }
-        public double relevancy { get; set; }
-        public string desktop_path { get; private set; }
-        public string generic_name { get; private set; default = ""; }
-
-        private bool is_command = false;
-
-        public signal void icon_changed ();
-        public signal void launched (App app);
-
-        public App (GMenu.TreeEntry entry) {
-            name = entry.get_display_name ();
-            description = entry.get_comment () ?? name;
-            exec = entry.get_exec ();
-            desktop_id = entry.get_desktop_file_id ();
-            icon_name = entry.get_icon () ?? "application-default-icon";
-            desktop_path = entry.get_desktop_file_path ();
-            keywords = Unity.AppInfoManager.get_default ().get_keywords (desktop_id);
-            generic_name = entry.get_generic_name ();
-
-            update_icon ();
-            Slingshot.icon_theme.changed.connect (update_icon);
-        }
-
-        public App.from_command (string command) {
-
-            name = command;
-            description = _("Run this command...");
-            exec = command;
-            desktop_id = command;
-            icon_name = "system-run";
-
-            is_command = true;
-
-            update_icon ();
-
-        }
-
-        public void update_icon () {
-            icon = load_icon (Slingshot.settings.icon_size);
-            icon_changed ();
-        }
-
-        private delegate void IconLoadFallback ();
-
-        private class IconLoadFallbackMethod {
-            public unowned IconLoadFallback load_icon;
-
-            public IconLoadFallbackMethod (IconLoadFallback fallback) {
-                load_icon = fallback;
-            }
-        }
-
-        public Gdk.Pixbuf load_icon (int size) {
-            Gdk.Pixbuf icon = null;
-            var flags = Gtk.IconLookupFlags.FORCE_SIZE;
-
-            IconLoadFallbackMethod[] fallbacks = {
-                new IconLoadFallbackMethod (() => {
-                    try {
-                        icon = Slingshot.icon_theme.load_icon (icon_name, size, flags);
-                    } catch (Error e) {
-                        warning ("Could not load icon. Falling back to method 2");
-                    }
-                }),
-
-                new IconLoadFallbackMethod (() => {
-                    try {
-                        if (icon_name.last_index_of (".") > 0) {
-                            var name = icon_name[0:icon_name.last_index_of (".")];
-                            icon = Slingshot.icon_theme.load_icon (name, size, flags);
-                        }
-                    } catch (Error e) {
-                        warning ("Could not load icon. Falling back to method 3");
-                    }
-                }),
-
-                new IconLoadFallbackMethod (() => {
-                    try {
-                        icon = new Gdk.Pixbuf.from_file_at_scale (icon_name, size, size, false);
-                    } catch (Error e) {
-                        warning ("Could not load icon. Falling back to method 4");
-                    }
-                }),
-
-                new IconLoadFallbackMethod (() => {
-                    try {
-                        icon = Slingshot.icon_theme.load_icon ("application-default-icon", size, flags);
-                     } catch (Error e) {
-                         warning ("Could not load icon. Falling back to method 5");
-                     }
-                }),
-
-                new IconLoadFallbackMethod (() => {
-                     try {
-                        icon = Slingshot.icon_theme.load_icon ("gtk-missing-image", size, flags);
-                     } catch (Error e) {
-                        error ("Could not find a fallback icon to load");
-                     }
-                })
-            };
-
-            foreach (IconLoadFallbackMethod fallback in fallbacks) {
-                fallback.load_icon ();
-                if (icon != null)
-                    break;
-            }
-
-            return icon;
-        }
-
-        public void launch () {
-            try {
-                if (is_command) {
-                    debug (@"Launching command: $name");
-                    Process.spawn_command_line_async (exec);
-                } else {
-                    launched (this); // Emit launched signal
-                    new DesktopAppInfo (desktop_id).launch (null, null);
-                    debug (@"Launching application: $name");
-                }
-            } catch (Error e) {
-                warning ("Failed to launch %s: %s", name, exec);
-            }
-        }
-
+public class Slingshot.Backend.App : Object {
+
+    public string name { get; construct set; }
+    public string description { get; private set; default = ""; }
+    public string desktop_id { get; construct set; }
+    public string exec { get; private set; }
+    public string icon_name { get; private set; default = ""; }
+    public string[] keywords { get; private set;}
+    public Gdk.Pixbuf icon { get; private set; }
+    public double popularity { get; set; }
+    public double relevancy { get; set; }
+    public string desktop_path { get; private set; }
+    public string generic_name { get; private set; default = ""; }
+
+    private bool is_command = false;
+
+    public signal void icon_changed ();
+    public signal void launched (App app);
+
+    public App (GMenu.TreeEntry entry) {
+        name = entry.get_display_name ();
+        description = entry.get_comment () ?? name;
+        exec = entry.get_exec ();
+        desktop_id = entry.get_desktop_file_id ();
+        icon_name = entry.get_icon () ?? "application-default-icon";
+        desktop_path = entry.get_desktop_file_path ();
+        keywords = Unity.AppInfoManager.get_default ().get_keywords (desktop_id);
+        generic_name = entry.get_generic_name ();
+
+        update_icon ();
+        Slingshot.icon_theme.changed.connect (update_icon);
+    }
+
+    public App.from_command (string command) {
+
+        name = command;
+        description = _("Run this command...");
+        exec = command;
+        desktop_id = command;
+        icon_name = "system-run";
+
+        is_command = true;
+
+        update_icon ();
+
+    }
+
+    public void update_icon () {
+        icon = load_icon (Slingshot.settings.icon_size);
+        icon_changed ();
+    }
+
+    private delegate void IconLoadFallback ();
+
+    private class IconLoadFallbackMethod {
+        public unowned IconLoadFallback load_icon;
+
+        public IconLoadFallbackMethod (IconLoadFallback fallback) {
+            load_icon = fallback;
+        }
+    }
+
+    public Gdk.Pixbuf load_icon (int size) {
+        Gdk.Pixbuf icon = null;
+        var flags = Gtk.IconLookupFlags.FORCE_SIZE;
+
+        IconLoadFallbackMethod[] fallbacks = {
+            new IconLoadFallbackMethod (() => {
+                try {
+                    icon = Slingshot.icon_theme.load_icon (icon_name, size, flags);
+                } catch (Error e) {
+                    warning ("Could not load icon. Falling back to method 2");
+                }
+            }),
+
+            new IconLoadFallbackMethod (() => {
+                try {
+                    if (icon_name.last_index_of (".") > 0) {
+                        var name = icon_name[0:icon_name.last_index_of (".")];
+                        icon = Slingshot.icon_theme.load_icon (name, size, flags);
+                    }
+                } catch (Error e) {
+                    warning ("Could not load icon. Falling back to method 3");
+                }
+            }),
+
+            new IconLoadFallbackMethod (() => {
+                try {
+                    icon = new Gdk.Pixbuf.from_file_at_scale (icon_name, size, size, false);
+                } catch (Error e) {
+                    warning ("Could not load icon. Falling back to method 4");
+                }
+            }),
+
+            new IconLoadFallbackMethod (() => {
+                try {
+                    icon = Slingshot.icon_theme.load_icon ("application-default-icon", size, flags);
+                 } catch (Error e) {
+                     warning ("Could not load icon. Falling back to method 5");
+                 }
+            }),
+
+            new IconLoadFallbackMethod (() => {
+                 try {
+                    icon = Slingshot.icon_theme.load_icon ("gtk-missing-image", size, flags);
+                 } catch (Error e) {
+                    error ("Could not find a fallback icon to load");
+                 }
+            })
+        };
+
+        foreach (IconLoadFallbackMethod fallback in fallbacks) {
+            fallback.load_icon ();
+            if (icon != null)
+                break;
+        }
+
+        return icon;
+    }
+
+    public void launch () {
+        try {
+            if (is_command) {
+                debug (@"Launching command: $name");
+                Process.spawn_command_line_async (exec);
+            } else {
+                launched (this); // Emit launched signal
+                new DesktopAppInfo (desktop_id).launch (null, null);
+                debug (@"Launching application: $name");
+            }
+        } catch (Error e) {
+            warning ("Failed to launch %s: %s", name, exec);
+        }
     }
 
 }

=== modified file 'src/Backend/AppSystem.vala'
--- src/Backend/AppSystem.vala	2013-08-26 08:45:09 +0000
+++ src/Backend/AppSystem.vala	2013-12-26 00:08:04 +0000
@@ -16,232 +16,224 @@
 //  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 //
 
-using GLib;
-using GMenu;
-using Gee;
-
-namespace Slingshot.Backend {
-
-    public class AppSystem : Object {
-
-        private ArrayList<TreeDirectory> categories = null;
-        private HashMap<string, ArrayList<App>> apps = null;
-        private GMenu.Tree apps_menu = null;
-
-        private RelevancyService rl_service;
-
-        public signal void changed ();
-        private bool index_changed = false;
-
-        construct {
-
-            rl_service = new RelevancyService ();
-            rl_service.update_complete.connect (update_popularity);
-
-            apps_menu = GMenu.Tree.lookup ("pantheon-applications.menu", TreeFlags.INCLUDE_EXCLUDED);
-            apps_menu.add_monitor ((menu) => {
-
-                debug ("Apps menu tree changed. Updating…");
-                index_changed = true;
-                update_app_system ();
-                changed ();
-
-            });
-
-            apps_menu.set_sort_key (TreeSortKey.DISPLAY_NAME);
+public class Slingshot.Backend.AppSystem : Object {
+
+    private Gee.ArrayList<GMenu.TreeDirectory> categories = null;
+    private Gee.HashMap<string, Gee.ArrayList<App>> apps = null;
+    private GMenu.Tree apps_menu = null;
+
+    private RelevancyService rl_service;
+
+    public signal void changed ();
+    private bool index_changed = false;
+
+    construct {
+
+        rl_service = new RelevancyService ();
+        rl_service.update_complete.connect (update_popularity);
+
+        apps_menu = GMenu.Tree.lookup ("pantheon-applications.menu", GMenu.TreeFlags.INCLUDE_EXCLUDED);
+        apps_menu.add_monitor ((menu) => {
+
+            debug ("Apps menu tree changed. Updating…");
+            index_changed = true;
             update_app_system ();
-
-        }
-
-        private void update_app_system () {
-
-            rl_service.refresh_popularity ();
-
-            update_categories_index ();
-            update_apps ();
-
-        }
-
-        private void update_categories_index () {
-
-            var root_tree = apps_menu.get_root_directory ();
-
-            if (categories == null || index_changed) {
-                categories = new ArrayList<TreeDirectory> ();
-
-                foreach (TreeItem item in root_tree.get_contents ()) {
-                    if (item.get_type () == TreeItemType.DIRECTORY)
-                        if (((TreeDirectory) item).get_is_nodisplay () == false)
-                            categories.add ((TreeDirectory) item);
-                }
-            }
-
-        }
-
-        private void update_popularity () {
-
-            foreach (ArrayList<App> category in apps.values)
-                foreach (App app in category)
-                    app.popularity = rl_service.get_app_popularity (app.desktop_id);
-        }
-
-        private void update_apps () {
-
-            if (index_changed) {
-                apps.clear ();
-                apps = null;
-                index_changed = false;
-            }
-
-            if (apps == null) {
-
-                apps = new HashMap<string, ArrayList<App>> ();
-
-                foreach (TreeDirectory cat in categories) {
-                    apps.set (cat.get_name (), get_apps_by_category (cat));
-                }
-
-            }
-
-        }
-
-        public ArrayList<TreeDirectory> get_categories () {
-
-            return categories;
-
-        }
-
-        public ArrayList<App> get_apps_by_category (TreeDirectory category) {
-
-            var app_list = new ArrayList<App> ();
-
-            foreach (TreeItem item in category.get_contents ()) {
-                App app;
-                switch (item.get_type ()) {
-                    case TreeItemType.DIRECTORY:
-                        app_list.add_all (get_apps_by_category ((TreeDirectory) item));
-                        break;
-                    case TreeItemType.ENTRY:
-                        if (is_entry ((TreeEntry) item)) {
-                            app = new App ((TreeEntry) item);
-                            app.launched.connect (rl_service.app_launched);
-                            app_list.add (app);
-                        }
-                        break;
-                }
-            }
-            return app_list;
-
-        }
-
-        private bool is_entry (TreeEntry entry) {
-
-            if (entry.get_launch_in_terminal () == false
-                && entry.get_is_excluded () == false
-                && entry.get_is_nodisplay () == false) {
-                return true;
-            } else {
-                return false;
-            }
-
-        }
-
-        public HashMap<string, ArrayList<App>> get_apps () {
-
-            return apps;
-
-        }
-
-        public SList<App> get_apps_by_popularity () {
-
-            var sorted_apps = new SList<App> ();
-
-            foreach (ArrayList<App> category in apps.values) {
-                foreach (App app in category) {
-                    sorted_apps.insert_sorted_with_data (app, Utils.sort_apps_by_popularity);
-                }
-            }
-
-            return sorted_apps;
-
-        }
-
-        public SList<App> get_apps_by_name () {
-
-            var sorted_apps = new SList<App> ();
-            string[] sorted_apps_execs = {};
-
-            foreach (ArrayList<App> category in apps.values) {
-                foreach (App app in category) {
-                    if (!(app.exec in sorted_apps_execs)) {
-                        sorted_apps.insert_sorted_with_data (app, Utils.sort_apps_by_name);
-                        sorted_apps_execs += app.exec;
+            changed ();
+
+        });
+
+        apps_menu.set_sort_key (GMenu.TreeSortKey.DISPLAY_NAME);
+        update_app_system ();
+
+    }
+
+    private void update_app_system () {
+
+        rl_service.refresh_popularity ();
+
+        update_categories_index ();
+        update_apps ();
+
+    }
+
+    private void update_categories_index () {
+
+        var root_tree = apps_menu.get_root_directory ();
+
+        if (categories == null || index_changed) {
+            categories = new Gee.ArrayList<GMenu.TreeDirectory> ();
+
+            foreach (GMenu.TreeItem item in root_tree.get_contents ()) {
+                if (item.get_type () == GMenu.TreeItemType.DIRECTORY)
+                    if (((GMenu.TreeDirectory) item).get_is_nodisplay () == false)
+                        categories.add ((GMenu.TreeDirectory) item);
+            }
+        }
+
+    }
+
+    private void update_popularity () {
+
+        foreach (Gee.ArrayList<App> category in apps.values)
+            foreach (App app in category)
+                app.popularity = rl_service.get_app_popularity (app.desktop_id);
+    }
+
+    private void update_apps () {
+
+        if (index_changed) {
+            apps.clear ();
+            apps = null;
+            index_changed = false;
+        }
+
+        if (apps == null) {
+
+            apps = new Gee.HashMap<string, Gee.ArrayList<App>> ();
+
+            foreach (GMenu.TreeDirectory cat in categories) {
+                apps.set (cat.get_name (), get_apps_by_category (cat));
+            }
+
+        }
+
+    }
+
+    public Gee.ArrayList<GMenu.TreeDirectory> get_categories () {
+
+        return categories;
+
+    }
+
+    public Gee.ArrayList<App> get_apps_by_category (GMenu.TreeDirectory category) {
+
+        var app_list = new Gee.ArrayList<App> ();
+
+        foreach (GMenu.TreeItem item in category.get_contents ()) {
+            App app;
+            switch (item.get_type ()) {
+                case GMenu.TreeItemType.DIRECTORY:
+                    app_list.add_all (get_apps_by_category ((GMenu.TreeDirectory) item));
+                    break;
+                case GMenu.TreeItemType.ENTRY:
+                    if (is_entry ((GMenu.TreeEntry) item)) {
+                        app = new App ((GMenu.TreeEntry) item);
+                        app.launched.connect (rl_service.app_launched);
+                        app_list.add (app);
                     }
+                    break;
+            }
+        }
+        return app_list;
+
+    }
+
+    private bool is_entry (GMenu.TreeEntry entry) {
+
+        if (entry.get_launch_in_terminal () == false
+            && entry.get_is_excluded () == false
+            && entry.get_is_nodisplay () == false) {
+            return true;
+        } else {
+            return false;
+        }
+
+    }
+
+    public Gee.HashMap<string, Gee.ArrayList<App>> get_apps () {
+
+        return apps;
+
+    }
+
+    public SList<App> get_apps_by_popularity () {
+
+        var sorted_apps = new SList<App> ();
+
+        foreach (Gee.ArrayList<App> category in apps.values) {
+            foreach (App app in category) {
+                sorted_apps.insert_sorted_with_data (app, Utils.sort_apps_by_popularity);
+            }
+        }
+
+        return sorted_apps;
+
+    }
+
+    public SList<App> get_apps_by_name () {
+
+        var sorted_apps = new SList<App> ();
+        string[] sorted_apps_execs = {};
+
+        foreach (Gee.ArrayList<App> category in apps.values) {
+            foreach (App app in category) {
+                if (!(app.exec in sorted_apps_execs)) {
+                    sorted_apps.insert_sorted_with_data (app, Utils.sort_apps_by_name);
+                    sorted_apps_execs += app.exec;
                 }
             }
-
-            return sorted_apps;
-
         }
 
-        public async ArrayList<App> search_results (string search) {
-
-            Idle.add (search_results.callback, Priority.HIGH);
-            yield;
-
-            var filtered = new ArrayList<App> ();
-
-            /** It's a bit stupid algorithm, simply check if the char is present
-             * some of the App values, then assign it a double. This is very simple:
-             * if an App name coincide with the search string they have obvious the
-             * same length, then the fraction will be 1.0.
-             * I've added a small multiplier when matching to a exec name, to give
-             * more priority to app.name
-            **/
-            string[] sorted_apps_execs = {};
-
-            foreach (ArrayList<App> category in apps.values) {
-                foreach (App app in category) {
-                    if (!(app.exec in sorted_apps_execs)) {
-                        sorted_apps_execs += app.exec;
-                        if (search in app.name.down ()) {
-                            if (search == app.name.down ()[0:search.length])
-                                app.relevancy = 0.5 - app.popularity; // It must be minor than 1.0
-                            else
-                                app.relevancy = app.name.length / search.length - app.popularity;
-                            filtered.add (app);
-                        } else if (search in app.exec.down ()) {
-                            app.relevancy = app.exec.length / search.length * 10.0 - app.popularity;
-                            filtered.add (app);
-                        } else if (search in app.description.down ()) {
-                            app.relevancy = app.description.length / search.length - app.popularity;
-                            filtered.add (app);
-                        } else if (search in app.generic_name.down ()) {
-                            app.relevancy = app.generic_name.length / search.length - app.popularity;
-                            filtered.add (app);
-                        }  else if (app.keywords != null) {
-                            app.relevancy = 0;
-                            foreach (string keyword in app.keywords) {
-                                foreach (string search_word in search.split (" ")) {
-                                    if (search_word in keyword.down ()) {
-                                        app.relevancy += (keyword.length / search_word.length) * (app.keywords.length / search.split (" ").length) - app.popularity;
-                                        filtered.add (app);
-                                    }
+        return sorted_apps;
+
+    }
+
+    public async Gee.ArrayList<App> search_results (string search) {
+
+        Idle.add (search_results.callback, Priority.HIGH);
+        yield;
+
+        var filtered = new Gee.ArrayList<App> ();
+
+        /** It's a bit stupid algorithm, simply check if the char is present
+         * some of the App values, then assign it a double. This is very simple:
+         * if an App name coincide with the search string they have obvious the
+         * same length, then the fraction will be 1.0.
+         * I've added a small multiplier when matching to a exec name, to give
+         * more priority to app.name
+        **/
+        string[] sorted_apps_execs = {};
+
+        foreach (Gee.ArrayList<App> category in apps.values) {
+            foreach (App app in category) {
+                if (!(app.exec in sorted_apps_execs)) {
+                    sorted_apps_execs += app.exec;
+                    if (search in app.name.down ()) {
+                        if (search == app.name.down ()[0:search.length])
+                            app.relevancy = 0.5 - app.popularity; // It must be minor than 1.0
+                        else
+                            app.relevancy = app.name.length / search.length - app.popularity;
+                        filtered.add (app);
+                    } else if (search in app.exec.down ()) {
+                        app.relevancy = app.exec.length / search.length * 10.0 - app.popularity;
+                        filtered.add (app);
+                    } else if (search in app.description.down ()) {
+                        app.relevancy = app.description.length / search.length - app.popularity;
+                        filtered.add (app);
+                    } else if (search in app.generic_name.down ()) {
+                        app.relevancy = app.generic_name.length / search.length - app.popularity;
+                        filtered.add (app);
+                    }  else if (app.keywords != null) {
+                        app.relevancy = 0;
+                        foreach (string keyword in app.keywords) {
+                            foreach (string search_word in search.split (" ")) {
+                                if (search_word in keyword.down ()) {
+                                    app.relevancy += (keyword.length / search_word.length) * (app.keywords.length / search.split (" ").length) - app.popularity;
+                                    filtered.add (app);
                                 }
                             }
                         }
                     }
                 }
             }
-
-            filtered.sort ((a, b) => Utils.sort_apps_by_relevancy ((App) a, (App) b));
-
-            if (filtered.size > 20) {
-                return (ArrayList<App>) filtered[0:20];
-            } else {
-                return filtered;
-            }
-
+        }
+
+        filtered.sort ((a, b) => Utils.sort_apps_by_relevancy ((App) a, (App) b));
+
+        if (filtered.size > 20) {
+            return (Gee.ArrayList<App>) filtered[0:20];
+        } else {
+            return filtered;
         }
 
     }

=== modified file 'src/Backend/DBusService.vala'
--- src/Backend/DBusService.vala	2013-02-11 22:48:50 +0000
+++ src/Backend/DBusService.vala	2013-12-26 00:08:04 +0000
@@ -16,57 +16,54 @@
 //  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 
 
-namespace Slingshot {
-
-    public class DBusService : Object {
-
-        [DBus (name = "org.pantheon.desktop.AppLauncherService")]
-        private class Service : Object {
-            public signal void visibility_changed (bool launcher_visible);
-            private Gtk.Widget? view = null;
-
-            public Service (Gtk.Widget view) {
-                this.view = view;
-                view.show.connect (on_view_visibility_change);
-                view.hide.connect (on_view_visibility_change);
-            }
-
-            internal void on_view_visibility_change () {
-                debug ("Visibility changed. Sending visible = %s over DBus", view.visible.to_string ());
-                this.visibility_changed (view.visible);
-            }
-        }
-
-        private Service? service = null;
-
-        public DBusService (SlingshotView view) {
-            // Own bus name
-            // try to register service name in session bus
-            Bus.own_name (BusType.SESSION,
-                          "org.pantheon.desktop.AppLauncherService",
-                          BusNameOwnerFlags.NONE,
-                          (conn) => { on_bus_aquired (conn, view); },
-                          name_acquired_handler,
-                          () => { critical ("Could not aquire service name"); });
-
-        }
-
-        private void on_bus_aquired (DBusConnection connection, SlingshotView view) {
-            try {
-                // start service and register it as dbus object
-                service = new Service (view);
-                connection.register_object ("/org/pantheon/desktop/AppLauncherService", service);
-            } catch (IOError e) {
-                critical ("Could not register service: %s", e.message);
-                return_if_reached ();
-            }
-        }
-
-        private void name_acquired_handler (DBusConnection connection, string name) {
-            message ("Service registration suceeded");
-            return_if_fail (service != null);
-            // Emit initial state
-            service.on_view_visibility_change ();
-        }
-    }
-}
+public class Slingshot.DBusService : Object {
+
+    [DBus (name = "org.pantheon.desktop.AppLauncherService")]
+    private class Service : Object {
+        public signal void visibility_changed (bool launcher_visible);
+        private Gtk.Widget? view = null;
+
+        public Service (Gtk.Widget view) {
+            this.view = view;
+            view.show.connect (on_view_visibility_change);
+            view.hide.connect (on_view_visibility_change);
+        }
+
+        internal void on_view_visibility_change () {
+            debug ("Visibility changed. Sending visible = %s over DBus", view.visible.to_string ());
+            this.visibility_changed (view.visible);
+        }
+    }
+
+    private Service? service = null;
+
+    public DBusService (SlingshotView view) {
+        // Own bus name
+        // try to register service name in session bus
+        Bus.own_name (BusType.SESSION,
+                      "org.pantheon.desktop.AppLauncherService",
+                      BusNameOwnerFlags.NONE,
+                      (conn) => { on_bus_aquired (conn, view); },
+                      name_acquired_handler,
+                      () => { critical ("Could not aquire service name"); });
+
+    }
+
+    private void on_bus_aquired (DBusConnection connection, SlingshotView view) {
+        try {
+            // start service and register it as dbus object
+            service = new Service (view);
+            connection.register_object ("/org/pantheon/desktop/AppLauncherService", service);
+        } catch (IOError e) {
+            critical ("Could not register service: %s", e.message);
+            return_if_reached ();
+        }
+    }
+
+    private void name_acquired_handler (DBusConnection connection, string name) {
+        message ("Service registration suceeded");
+        return_if_fail (service != null);
+        // Emit initial state
+        service.on_view_visibility_change ();
+    }
+}
\ No newline at end of file

=== modified file 'src/Backend/RelevancyService.vala'
--- src/Backend/RelevancyService.vala	2013-01-13 16:41:55 +0000
+++ src/Backend/RelevancyService.vala	2013-12-26 00:08:04 +0000
@@ -17,159 +17,164 @@
 //
 //  Thanks to Synapse Developers for this class
 
-using Zeitgeist;
-
-namespace Slingshot.Backend {
-
-    public class RelevancyService : Object {
-
-        private Zeitgeist.Log zg_log;
-        private Zeitgeist.DataSourceRegistry zg_dsr;
-        private Gee.HashMap<string, int> app_popularity;
-        private bool has_datahub_gio_module = false;
-
-        private const float MULTIPLIER = 65535.0f;
-        
-        public signal void update_complete ();
-
-        public RelevancyService () {
-
-            zg_log = new Zeitgeist.Log ();
-            app_popularity = new Gee.HashMap<string, int> ();
-
-            refresh_popularity ();
-            check_data_sources.begin ();
-
-            Timeout.add_seconds (60*30, refresh_popularity);
-
-        }
-
-        private async void check_data_sources () {
-
-            zg_dsr = new Zeitgeist.DataSourceRegistry ();
+public class Slingshot.Backend.RelevancyService : Object {
+
+    private Zeitgeist.Log zg_log;
+    private Zeitgeist.DataSourceRegistry zg_dsr;
+    private Gee.HashMap<string, int> app_popularity;
+    private bool has_datahub_gio_module = false;
+
+    private const float MULTIPLIER = 65535.0f;
+    
+    public signal void update_complete ();
+
+    public RelevancyService () {
+
+        zg_log = new Zeitgeist.Log ();
+        app_popularity = new Gee.HashMap<string, int> ();
+
+        refresh_popularity ();
+        check_data_sources.begin ();
+
+        Timeout.add_seconds (60*30, refresh_popularity);
+
+    }
+
+    private async void check_data_sources () {
+
+        zg_dsr = new Zeitgeist.DataSourceRegistry ();
+        try {
             var ptr_arr = yield zg_dsr.get_data_sources (null);
 
-            for (uint i=0; i < ptr_arr.len; i++) {
+            for (uint i=0; i < ptr_arr.length; i++) {
 
                 unowned Zeitgeist.DataSource ds;
-                ds = (Zeitgeist.DataSource) ptr_arr.index (i);
-                if (ds.get_unique_id () == "com.zeitgeist-project,datahub,gio-launch-listener"
-                        && ds.is_enabled ()) {
+                ds = (Zeitgeist.DataSource) ptr_arr.get (i);
+                if (ds.unique_id  == "com.zeitgeist-project,datahub,gio-launch-listener"
+                        && ds.enabled == true) {
 
                     has_datahub_gio_module = true;
                     break;
                 }
             }
+        } catch (Error e) {
+            critical (e.message);
         }
-
-        public bool refresh_popularity () {
-
+    }
+
+    public bool refresh_popularity () {
+
+        load_application_relevancies.begin ();
+        return true;
+
+    }
+    private void reload_relevancies () {
+
+        Idle.add_full (Priority.LOW, () => {
             load_application_relevancies.begin ();
-            return true;
-
-        }
-        private void reload_relevancies () {
-
-            Idle.add_full (Priority.LOW, () => {
-                load_application_relevancies.begin ();
-                return false;
-            });
-        }
-
-        private async void load_application_relevancies () {
-
-            Idle.add (load_application_relevancies.callback, Priority.HIGH);
-            yield;
-
-            int64 end = Zeitgeist.Timestamp.now ();
-            int64 start = end - Zeitgeist.Timestamp.WEEK * 4;
-            Zeitgeist.TimeRange tr = new Zeitgeist.TimeRange (start, end);
-
-            var event = new Zeitgeist.Event ();
-            event.set_interpretation ("!" + ZG_LEAVE_EVENT);
-            var subject = new Zeitgeist.Subject ();
-            subject.set_interpretation (NFO_SOFTWARE);
-            subject.set_uri ("application://*");
-            event.add_subject (subject);
-
-            var ptr_arr = new PtrArray ();
-            ptr_arr.add (event);
-
-            Zeitgeist.ResultSet rs;
-
-            try {
-
-                rs = yield zg_log.find_events (tr, (owned) ptr_arr,
-                        Zeitgeist.StorageState.ANY,
-                        256,
-                        Zeitgeist.ResultType.MOST_POPULAR_SUBJECTS,
-                        null);
-
-                app_popularity.clear ();
-                uint size = rs.size ();
-                uint index = 0;
-
-                // Zeitgeist (0.6) doesn't have any stats API, so let's approximate
-
-                foreach (Zeitgeist.Event e in rs) {
-
-                    if (e.num_subjects () <= 0) continue;
-                    Zeitgeist.Subject s = e.get_subject (0);
-
-                    float power = index / (size * 2) + 0.5f; // linearly <0.5, 1.0>
-                    float relevancy = 1.0f / Math.powf (index + 1, power);
-                    app_popularity[s.get_uri ()] = (int)(relevancy * MULTIPLIER);
-                    index++;
-                }
-                update_complete ();
-            } catch (Error err) {
-                warning ("%s", err.message);
-                return;
-            }
-        }
-
-        public float get_app_popularity (string desktop_id) {
-
-            var id = "application://" + desktop_id;
-
-            if (app_popularity.has_key(id)) {
-                return app_popularity[id] / MULTIPLIER;
-            }
-
-            return 0.0f;
-        }
-
-        public void app_launched (App app) {
-
-            string app_uri = null;
-            if (app.desktop_id != null) {
-                app_uri = "application://" + app.desktop_id;
-            }
-
-            push_app_launch (app_uri, app.name);
-
-            // and refresh
-            reload_relevancies ();
-        }
-
-        private void push_app_launch (string app_uri, string? display_name) {
-
-            message ("Pushing launch event: %s [%s]", app_uri, display_name);
-            var event = new Zeitgeist.Event ();
-            var subject = new Zeitgeist.Subject ();
-
-            event.set_actor ("application://synapse.desktop");
-            event.set_interpretation (Zeitgeist.ZG_ACCESS_EVENT);
-            event.set_manifestation (Zeitgeist.ZG_USER_ACTIVITY);
-            event.add_subject (subject);
-
-            subject.set_uri (app_uri);
-            subject.set_interpretation (Zeitgeist.NFO_SOFTWARE);
-            subject.set_manifestation (Zeitgeist.NFO_SOFTWARE_ITEM);
-            subject.set_mimetype ("application/x-desktop");
-            subject.set_text (display_name);
-
-            zg_log.insert_events_no_reply (event, null);
-        }
-    }
-}
+            return false;
+        });
+    }
+
+    private async void load_application_relevancies () {
+
+        Idle.add (load_application_relevancies.callback, Priority.HIGH);
+        yield;
+
+        int64 end = Zeitgeist.Timestamp.from_now ();
+        int64 start = end - Zeitgeist.Timestamp.WEEK * 4;
+        Zeitgeist.TimeRange tr = new Zeitgeist.TimeRange (start, end);
+
+        var event = new Zeitgeist.Event ();
+        event.interpretation = "!" + Zeitgeist.ZG.LEAVE_EVENT;
+        var subject = new Zeitgeist.Subject ();
+        subject.interpretation = Zeitgeist.NFO.SOFTWARE;
+        subject.uri = "application://*";
+        event.add_subject (subject);
+
+        var ptr_arr = new GLib.GenericArray<Zeitgeist.Event> ();
+        ptr_arr.add (event);
+
+        Zeitgeist.ResultSet rs;
+
+        try {
+
+            rs = yield zg_log.find_events (tr, (owned) ptr_arr,
+                    Zeitgeist.StorageState.ANY,
+                    256,
+                    Zeitgeist.ResultType.MOST_POPULAR_SUBJECTS,
+                    null);
+
+            app_popularity.clear ();
+            uint size = rs.size ();
+            uint index = 0;
+
+            // Zeitgeist (0.6) doesn't have any stats API, so let's approximate
+
+            foreach (Zeitgeist.Event e in rs) {
+
+                if (e.num_subjects () <= 0) continue;
+                Zeitgeist.Subject s = e.get_subject (0);
+
+                float power = index / (size * 2) + 0.5f; // linearly <0.5, 1.0>
+                float relevancy = 1.0f / Math.powf (index + 1, power);
+                app_popularity[s.uri] = (int)(relevancy * MULTIPLIER);
+                index++;
+            }
+            update_complete ();
+        } catch (Error err) {
+            warning ("%s", err.message);
+            return;
+        }
+    }
+
+    public float get_app_popularity (string desktop_id) {
+
+        var id = "application://" + desktop_id;
+
+        if (app_popularity.has_key(id)) {
+            return app_popularity[id] / MULTIPLIER;
+        }
+
+        return 0.0f;
+    }
+
+    public void app_launched (App app) {
+
+        string app_uri = null;
+        if (app.desktop_id != null) {
+            app_uri = "application://" + app.desktop_id;
+        }
+
+        push_app_launch (app_uri, app.name);
+
+        // and refresh
+        reload_relevancies ();
+    }
+
+    private void push_app_launch (string app_uri, string? display_name) {
+
+        message ("Pushing launch event: %s [%s]", app_uri, display_name);
+        var event = new Zeitgeist.Event ();
+        var subject = new Zeitgeist.Subject ();
+
+        event.actor = "application://synapse.desktop";
+        event.interpretation = Zeitgeist.ZG.ACCESS_EVENT;
+        event.manifestation = Zeitgeist.ZG.USER_ACTIVITY;
+        event.add_subject (subject);
+
+        subject.uri = app_uri;
+        subject.interpretation = Zeitgeist.NFO.SOFTWARE;
+        subject.manifestation = Zeitgeist.NFO.SOFTWARE_ITEM;
+        subject.mimetype = "application/x-desktop";
+        subject.text = display_name;
+        var ptr_arr = new GLib.GenericArray<Zeitgeist.Event> ();
+        ptr_arr.add (event);
+        
+        try {
+            zg_log.insert_events_no_reply (ptr_arr);
+        } catch (Error e) {
+            critical (e.message);
+        }
+    }
+}
\ No newline at end of file

=== modified file 'src/Settings.vala'
--- src/Settings.vala	2013-09-03 21:34:05 +0000
+++ src/Settings.vala	2013-12-26 00:08:04 +0000
@@ -16,34 +16,28 @@
 //  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 //
 
-using Granite.Services;
-
-namespace Slingshot {
-
-    public class Settings : Granite.Services.Settings {
-
-        protected class GalaSettings : Granite.Services.Settings {
-
-            public string hotcorner_topleft { get; set; }
-
-            public GalaSettings () {
-                base ("org.pantheon.desktop.gala.behavior");
-            }
-        }
-
-        public int columns { get; set; }
-        public int rows { get; set; }
-        public int icon_size { get; set; }
-        public bool show_category_filter { get; set; }
-        public bool use_category { get; set; }
-        public string screen_resolution { get; set; }
-        public GalaSettings gala_settings;
-
-        public Settings () {
-            base ("org.pantheon.desktop.slingshot");
-            gala_settings = new GalaSettings ();
-        }
-
+public class Slingshot.Settings : Granite.Services.Settings {
+
+    protected class GalaSettings : Granite.Services.Settings {
+
+        public string hotcorner_topleft { get; set; }
+
+        public GalaSettings () {
+            base ("org.pantheon.desktop.gala.behavior");
+        }
+    }
+
+    public int columns { get; set; }
+    public int rows { get; set; }
+    public int icon_size { get; set; }
+    public bool show_category_filter { get; set; }
+    public bool use_category { get; set; }
+    public string screen_resolution { get; set; }
+    public GalaSettings gala_settings;
+
+    public Settings () {
+        base ("org.pantheon.desktop.slingshot");
+        gala_settings = new GalaSettings ();
     }
 
 }

=== modified file 'src/Slingshot.vala'
--- src/Slingshot.vala	2013-08-12 22:47:17 +0000
+++ src/Slingshot.vala	2013-12-26 00:08:04 +0000
@@ -16,100 +16,93 @@
 //  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 //
 
-using Gtk;
-using Granite;
-
-namespace Slingshot {
-
-    public class Slingshot : Granite.Application {
-
-        private SlingshotView view = null;
-        public static bool silent = false;
-        public static bool command_mode = false;
-
-        public static Settings settings { get; private set; default = null; }
-        //public static CssProvider style_provider { get; private set; default = null; }
-        public static IconTheme icon_theme { get; set; default = null; }
-        private DBusService? dbus_service = null;
-
-        construct {
-
-            build_data_dir = Build.DATADIR;
-            build_pkg_data_dir = Build.PKGDATADIR;
-            build_release_name = Build.RELEASE_NAME;
-            build_version = Build.VERSION;
-            build_version_info = Build.VERSION_INFO;
-
-            program_name = "Slingshot";
-		    exec_name = "slingshot-launcher";
-		    app_copyright = "GPLv3";
-		    app_icon = "";
-		    app_launcher = "";
-            app_years = "2011-2012";
-            application_id = "net.launchpad.slingshot";
-		    main_url = "https://launchpad.net/slingshot";
-		    bug_url = "https://bugs.launchpad.net/slingshot";
-		    help_url = "https://answers.launchpad.net/slingshot";
-		    translate_url = "https://translations.launchpad.net/slingshot";
-
-		    about_authors = {"Giulio Collura <random.cpp@gmail.com>",
-		                     "Andrea Basso <andrea@elementaryos.org"};
-		    about_artists = {"Harvey Cabaguio 'BassUltra' <harveycabaguio@gmail.com>",
-                             "Daniel Foré <bunny@go-docky.com>"};
-            about_translators = "Launchpad Translators";
-            about_license_type = License.GPL_3_0;
-
-        }
-
-        public Slingshot () {
-            settings = new Settings ();
-        }
-
-        protected override void activate () {
-            if (get_windows () == null) {
-                view = new SlingshotView ();
-                view.set_application (this);
-
-                if (dbus_service == null)
-                    dbus_service = new DBusService (view);
-
-                if (!silent) {
-                    //view.move_to_coords (0, 0);
-                    view.show_slingshot ();
-                }
-            } else {
-                if (view.visible && !silent)
-                    view.hide ();                  
-                else
-                    view.show_slingshot ();
-            }
-            silent = false;
-        }
-
-        static const OptionEntry[] entries = {
-            { "silent", 's', 0, OptionArg.NONE, ref silent, "Launch Slingshot as a background process without it appearing visually.", null },
-            { "command-mode", 'c', 0, OptionArg.NONE, ref command_mode, "This feature is not implemented yet. When it is, description will be changed.", null },
-            { null }
-        };
-
-        public static int main (string[] args) {
-            if (args.length > 1) {
-                var context = new OptionContext ("");
-                context.add_main_entries (entries, "slingshot");
-                context.add_group (Gtk.get_option_group (true));
-                
-                try {
-                    context.parse (ref args);
-                } catch (Error e) {
-                    print (e.message + "\n");
-                }
-            }
+public class Slingshot.Slingshot : Granite.Application {
+
+    private SlingshotView view = null;
+    public static bool silent = false;
+    public static bool command_mode = false;
+
+    public static Settings settings { get; private set; default = null; }
+    //public static CssProvider style_provider { get; private set; default = null; }
+    public static Gtk.IconTheme icon_theme { get; set; default = null; }
+    private DBusService? dbus_service = null;
+
+    construct {
+
+        build_data_dir = Build.DATADIR;
+        build_pkg_data_dir = Build.PKGDATADIR;
+        build_release_name = Build.RELEASE_NAME;
+        build_version = Build.VERSION;
+        build_version_info = Build.VERSION_INFO;
+
+        program_name = "Slingshot";
+	    exec_name = "slingshot-launcher";
+	    app_copyright = "GPLv3";
+	    app_icon = "";
+	    app_launcher = "";
+        app_years = "2011-2012";
+        application_id = "net.launchpad.slingshot";
+	    main_url = "https://launchpad.net/slingshot";
+	    bug_url = "https://bugs.launchpad.net/slingshot";
+	    help_url = "https://answers.launchpad.net/slingshot";
+	    translate_url = "https://translations.launchpad.net/slingshot";
+
+	    about_authors = {"Giulio Collura <random.cpp@gmail.com>",
+	                     "Andrea Basso <andrea@elementaryos.org"};
+	    about_artists = {"Harvey Cabaguio 'BassUltra' <harveycabaguio@gmail.com>",
+                         "Daniel Foré <bunny@go-docky.com>"};
+        about_translators = "Launchpad Translators";
+        about_license_type = Gtk.License.GPL_3_0;
+
+    }
+
+    public Slingshot () {
+        settings = new Settings ();
+    }
+
+    protected override void activate () {
+        if (get_windows () == null) {
+            view = new SlingshotView ();
+            view.set_application (this);
+
+            if (dbus_service == null)
+                dbus_service = new DBusService (view);
+
+            if (!silent) {
+                //view.move_to_coords (0, 0);
+                view.show_slingshot ();
+            }
+        } else {
+            if (view.visible && !silent)
+                view.hide ();                  
+            else
+                view.show_slingshot ();
+        }
+        silent = false;
+    }
+
+    static const OptionEntry[] entries = {
+        { "silent", 's', 0, OptionArg.NONE, ref silent, "Launch Slingshot as a background process without it appearing visually.", null },
+        { "command-mode", 'c', 0, OptionArg.NONE, ref command_mode, "This feature is not implemented yet. When it is, description will be changed.", null },
+        { null }
+    };
+
+    public static int main (string[] args) {
+        if (args.length > 1) {
+            var context = new OptionContext ("");
+            context.add_main_entries (entries, "slingshot");
+            context.add_group (Gtk.get_option_group (true));
             
-            var app = new Slingshot ();
-
-            return app.run (args);
+            try {
+                context.parse (ref args);
+            } catch (Error e) {
+                print (e.message + "\n");
+            }
         }
+        
+        var app = new Slingshot ();
 
+        return app.run (args);
     }
 
 }

=== modified file 'src/SlingshotView.vala'
--- src/SlingshotView.vala	2013-10-24 10:20:42 +0000
+++ src/SlingshotView.vala	2013-12-26 00:08:04 +0000
@@ -16,16 +16,6 @@
 //  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 //
 
-using Gtk;
-using Gdk;
-using Gee;
-using Cairo;
-using Granite.Widgets;
-using GMenu;
-
-using Slingshot.Widgets;
-using Slingshot.Backend;
-
 namespace Slingshot {
 
     public enum Modality {
@@ -34,18 +24,18 @@
         SEARCH_VIEW
     }
 
-    public class SlingshotView : PopOver {
+    public class SlingshotView : Granite.Widgets.PopOver {
 
         // Widgets
         public Granite.Widgets.SearchBar searchbar;
-        public Layout view_manager;
-        public Switcher page_switcher;
-        public ModeButton view_selector;
+        public Gtk.Layout view_manager;
+        public Widgets.Switcher page_switcher;
+        public Granite.Widgets.ModeButton view_selector;
 
         // Views
         private Widgets.Grid grid_view;
-        private SearchView search_view;
-        private CategoryView category_view;
+        private Widgets.SearchView search_view;
+        private Widgets.CategoryView category_view;
 
         public Gtk.Grid top;
         public Gtk.Grid center;
@@ -54,9 +44,9 @@
         public Gtk.Box content_area;
         private Gtk.EventBox event_box;
 
-        public AppSystem app_system;
-        private ArrayList<TreeDirectory> categories;
-        public HashMap<string, ArrayList<App>> apps;
+        public Backend.AppSystem app_system;
+        private Gee.ArrayList<GMenu.TreeDirectory> categories;
+        public Gee.HashMap<string, Gee.ArrayList<Backend.App>> apps;
 
         private int current_position = 0;
         private int search_view_position = 0;
@@ -100,9 +90,9 @@
             // Have the window in the right place
             read_settings (true);
 
-            Slingshot.icon_theme = IconTheme.get_default ();
+            Slingshot.icon_theme = Gtk.IconTheme.get_default ();
 
-            app_system = new AppSystem ();
+            app_system = new Backend.AppSystem ();
 
             categories = app_system.get_categories ();
             apps = app_system.get_apps ();
@@ -148,16 +138,16 @@
             // Add top bar
             top = new Gtk.Grid ();
 
-            var top_separator = new Label (""); // A fake label
+            var top_separator = new Gtk.Label (""); // A fake label
             top_separator.set_hexpand(true);
 
-            view_selector = new ModeButton ();
+            view_selector = new Granite.Widgets.ModeButton ();
 
-            var image = new Image.from_icon_name ("view-grid-symbolic", IconSize.MENU);
+            var image = new Gtk.Image.from_icon_name ("view-grid-symbolic", Gtk.IconSize.MENU);
             image.tooltip_text = _("View as Grid");
             view_selector.append (image);
 
-            image = new Image.from_icon_name ("view-filter-symbolic", IconSize.MENU);
+            image = new Gtk.Image.from_icon_name ("view-filter-symbolic", Gtk.IconSize.MENU);
             image.tooltip_text = _("View by Category");
             view_selector.append (image);
 
@@ -179,7 +169,7 @@
 
             center = new Gtk.Grid ();
             // Create the layout which works like view_manager
-            view_manager = new Layout (null, null);
+            view_manager = new Gtk.Layout (null, null);
             view_manager.set_size_request (default_columns * 130, default_rows * 145);
             center.attach (view_manager, 0, 0, 1, 1);
 
@@ -188,26 +178,26 @@
             view_manager.put (grid_view, 0, 0);
 
             // Create the "SEARCH_VIEW"
-            search_view = new SearchView (this);
-            foreach (ArrayList<App> app_list in apps.values) {
+            search_view = new Widgets.SearchView (this);
+            foreach (Gee.ArrayList<Backend.App> app_list in apps.values) {
                 search_view.add_apps (app_list);
             }
             view_manager.put (search_view, -columns * 130, 0);
 
             // Create the "CATEGORY_VIEW"
-            category_view = new CategoryView (this);
+            category_view = new Widgets.CategoryView (this);
             view_manager.put (category_view, -columns * 130, 0);
 
             // Create the page switcher
-            page_switcher = new Switcher ();
+            page_switcher = new Widgets.Switcher ();
 
             // A bottom widget to keep the page switcher center
             bottom = new Gtk.Grid ();
 
 
-            var bottom_separator1 = new Label (""); // A fake label
+            var bottom_separator1 = new Gtk.Label (""); // A fake label
             bottom_separator1.set_hexpand (true);
-            var bottom_separator2 = new Label (""); // A fake label
+            var bottom_separator2 = new Gtk.Label (""); // A fake label
             bottom_separator2.set_hexpand (true);
             bottom.attach (bottom_separator1, 0, 0, 1, 1); // A fake label
             bottom.attach (page_switcher, 1, 0, 1, 1);
@@ -220,7 +210,7 @@
             event_box = new Gtk.EventBox ();
             event_box.add (container);
             // Add the container to the dialog's content area
-            content_area = get_content_area () as Box;
+            content_area = get_content_area () as Gtk.Box;
             content_area.pack_start (event_box);
 
             if (Slingshot.settings.use_category)
@@ -294,7 +284,7 @@
             //view_manager.draw.connect (this.draw_background);
 
             event_box.key_press_event.connect (on_key_press);
-            searchbar.text_changed_pause.connect ((text) => this.search (text));
+            searchbar.text_changed_pause.connect ((text) => this.search.begin (text));
             searchbar.grab_focus ();
 
             searchbar.activate.connect (() => {
@@ -302,8 +292,8 @@
                     search_view.launch_selected ();
                     hide ();
                 } else {
-                    if (get_focus () as AppEntry != null) // checking the selected widget is an AppEntry
-                        ((AppEntry) get_focus ()).launch_app ();
+                    if (get_focus () as Widgets.AppEntry != null) // checking the selected widget is an AppEntry
+                        ((Widgets.AppEntry) get_focus ()).launch_app ();
                 }
             });
 
@@ -433,8 +423,8 @@
                         search_view.launch_selected ();
                         hide ();
                     } else {
-                        if (get_focus () as AppEntry != null) // checking the selected widget is an AppEntry
-                            ((AppEntry)get_focus ()).launch_app ();
+                        if (get_focus () as Widgets.AppEntry != null) // checking the selected widget is an AppEntry
+                            ((Widgets.AppEntry)get_focus ()).launch_app ();
                     }
                     return true;
 
@@ -596,7 +586,7 @@
                     break;
 
                 case "Home":
-                    if (searchbar.text.size () > 0) {
+                    if (searchbar.text.length > 0) {
                         return false;
                     }
 
@@ -609,7 +599,7 @@
                     break;
 
                 case "End":
-                    if (searchbar.text.size () > 0) {
+                    if (searchbar.text.length > 0) {
                         return false;
                     }
 
@@ -641,7 +631,7 @@
 
         }
 
-        public override bool scroll_event (EventScroll event) {
+        public override bool scroll_event (Gdk.EventScroll event) {
 
             switch (event.direction.to_string ()) {
                 case "GDK_SCROLL_UP":
@@ -820,7 +810,7 @@
 
             var filtered = yield app_system.search_results (stripped);
 
-            foreach (App app in filtered) {
+            foreach (Backend.App app in filtered) {
                 search_view.show_app (app);
             }
 
@@ -836,9 +826,9 @@
             page_switcher.append ("1");
             page_switcher.set_active (0);
 
-            foreach (App app in app_system.get_apps_by_name ()) {
+            foreach (Backend.App app in app_system.get_apps_by_name ()) {
 
-                var app_entry = new AppEntry (app);
+                var app_entry = new Widgets.AppEntry (app);
                 app_entry.app_launched.connect (() => hide ());
                 grid_view.append (app_entry);
                 app_entry.show_all ();
@@ -878,7 +868,7 @@
         }
 
         private void normal_move_focus (int delta_column, int delta_row) {
-            if (get_focus () as AppEntry != null) { // we check if any AppEntry has focus. If it does, we move
+            if (get_focus () as Widgets.AppEntry != null) { // we check if any AppEntry has focus. If it does, we move
                 var new_focus = grid_view.get_child_at (column_focus + delta_column, row_focus + delta_row); // we check if the new widget exists
                 if (new_focus == null) {
                     if (delta_column <= 0)
@@ -960,4 +950,4 @@
         }
     }
 
-}
+}
\ No newline at end of file

=== modified file 'src/Widgets/AppEntry.vala'
--- src/Widgets/AppEntry.vala	2013-02-16 11:56:18 +0000
+++ src/Widgets/AppEntry.vala	2013-12-26 00:08:04 +0000
@@ -16,137 +16,130 @@
 //  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 //
 
-using Gtk;
-using Gdk;
-using Cairo;
-
-namespace Slingshot.Widgets {
-
-    public class AppEntry : Button {
-
-        public Label app_label;
-        private Pixbuf icon;
-        private Box layout;
-
-        public string exec_name;
-        public string app_name;
-        public string desktop_id;
-        public int icon_size;
-        public string desktop_path;
-
-        public signal void app_launched ();
-
-        private double alpha = 1.0;
-        private bool   dragging = false; //prevent launching
-
-        private Backend.App application;
-
-        public AppEntry (Backend.App app) {
-            TargetEntry dnd = {"text/uri-list", 0, 0};
-            Gtk.drag_source_set (this, Gdk.ModifierType.BUTTON1_MASK, {dnd},
-                Gdk.DragAction.COPY);
-
-            app_paintable = true;
-            set_visual (get_screen ().get_rgba_visual());
-            set_size_request (130, 130);
-            desktop_id = app.desktop_id;
-            desktop_path = app.desktop_path;
-
-            application = app;
-            app_name = app.name;
-            tooltip_text = app.description;
-            exec_name = app.exec;
-            icon_size = Slingshot.settings.icon_size;
-            icon = app.icon;
-
-            get_style_context ().add_class ("app");
-
-            app_label = new Label (app_name);
-            app_label.halign = Align.CENTER;
-            app_label.justify = Justification.CENTER;
-            app_label.set_line_wrap (true); // Need a smarter way
-            app_label.set_single_line_mode (false);
-            app_label.set_ellipsize (Pango.EllipsizeMode.END);
-
-            layout = new Box (Orientation.VERTICAL, 0);
-            layout.homogeneous = false;
-
-            layout.pack_start (app_label, false, true, 0);
-
-            add (Utils.set_padding (layout, 78, 5, 5, 5));
-
-            this.clicked.connect (launch_app);
-
-            this.button_press_event.connect ((e) => {return e.button == 3;});
-
-            this.drag_begin.connect ( (ctx) => {
-                this.dragging = true;
-                Gtk.drag_set_icon_pixbuf (ctx, icon, 0, 0);
-            });
-            this.drag_end.connect ( () => {
-                this.dragging = false;
-            });
-            this.drag_data_get.connect ( (ctx, sel, info, time) => {
-                sel.set_uris ({File.new_for_path (desktop_path).get_uri ()});
-            });
-
-            app.icon_changed.connect (queue_draw);
-
-        }
-
-        protected override bool draw (Context cr) {
-
-
-            Allocation size;
-            get_allocation (out size);
-
-            base.draw (cr);
-
-            // Draw icon
-            Gdk.cairo_set_source_pixbuf (cr, icon, (icon.width - size.width) / -2.0, 10);
-            cr.paint_with_alpha (alpha);
-
-            return true;
-
-        }
-
-        public void fade_out () {
-
-            Timeout.add (20, () => {
-
-                if (alpha <= 0.3) {
-                    queue_draw ();
-                    return false;
-                }
-
-                alpha -= 0.05;
-                queue_draw ();
-                return true;
-
-            });
-
-        }
-
-        public void fade_in () {
-
-            Timeout.add (20, () => {
-
-                if (alpha == 1.0) {
-                    queue_draw ();
-                    return false;
-                }
-
-                alpha += 0.05;
-                queue_draw ();
-                return true;
-
-            });
-
-        }
-
-        public void launch_app () {
-            application.launch ();
-            app_launched ();
-        }
+public class Slingshot.Widgets.AppEntry : Gtk.Button {
+
+    public Gtk.Label app_label;
+    private Gdk.Pixbuf icon;
+    private Gtk.Box layout;
+
+    public string exec_name;
+    public string app_name;
+    public string desktop_id;
+    public int icon_size;
+    public string desktop_path;
+
+    public signal void app_launched ();
+
+    private double alpha = 1.0;
+    private bool   dragging = false; //prevent launching
+
+    private Backend.App application;
+
+    public AppEntry (Backend.App app) {
+        Gtk.TargetEntry dnd = {"text/uri-list", 0, 0};
+        Gtk.drag_source_set (this, Gdk.ModifierType.BUTTON1_MASK, {dnd},
+            Gdk.DragAction.COPY);
+
+        app_paintable = true;
+        set_visual (get_screen ().get_rgba_visual());
+        set_size_request (130, 130);
+        desktop_id = app.desktop_id;
+        desktop_path = app.desktop_path;
+
+        application = app;
+        app_name = app.name;
+        tooltip_text = app.description;
+        exec_name = app.exec;
+        icon_size = Slingshot.settings.icon_size;
+        icon = app.icon;
+
+        get_style_context ().add_class ("app");
+
+        app_label = new Gtk.Label (app_name);
+        app_label.halign = Gtk.Align.CENTER;
+        app_label.justify = Gtk.Justification.CENTER;
+        app_label.set_line_wrap (true); // Need a smarter way
+        app_label.set_single_line_mode (false);
+        app_label.set_ellipsize (Pango.EllipsizeMode.END);
+
+        layout = new Gtk.Box (Gtk.Orientation.VERTICAL, 0);
+        layout.homogeneous = false;
+
+        layout.pack_start (app_label, false, true, 0);
+
+        add (Utils.set_padding (layout, 78, 5, 5, 5));
+
+        this.clicked.connect (launch_app);
+
+        this.button_press_event.connect ((e) => {return e.button == 3;});
+
+        this.drag_begin.connect ( (ctx) => {
+            this.dragging = true;
+            Gtk.drag_set_icon_pixbuf (ctx, icon, 0, 0);
+        });
+        this.drag_end.connect ( () => {
+            this.dragging = false;
+        });
+        this.drag_data_get.connect ( (ctx, sel, info, time) => {
+            sel.set_uris ({File.new_for_path (desktop_path).get_uri ()});
+        });
+
+        app.icon_changed.connect (queue_draw);
+
+    }
+
+    protected override bool draw (Cairo.Context cr) {
+
+
+        Gtk.Allocation size;
+        get_allocation (out size);
+
+        base.draw (cr);
+
+        // Draw icon
+        Gdk.cairo_set_source_pixbuf (cr, icon, (icon.width - size.width) / -2.0, 10);
+        cr.paint_with_alpha (alpha);
+
+        return true;
+
+    }
+
+    public void fade_out () {
+
+        Timeout.add (20, () => {
+
+            if (alpha <= 0.3) {
+                queue_draw ();
+                return false;
+            }
+
+            alpha -= 0.05;
+            queue_draw ();
+            return true;
+
+        });
+
+    }
+
+    public void fade_in () {
+
+        Timeout.add (20, () => {
+
+            if (alpha == 1.0) {
+                queue_draw ();
+                return false;
+            }
+
+            alpha += 0.05;
+            queue_draw ();
+            return true;
+
+        });
+
+    }
+
+    public void launch_app () {
+        application.launch ();
+        app_launched ();
     }
 }

=== modified file 'src/Widgets/CategoryView.vala'
--- src/Widgets/CategoryView.vala	2013-08-26 08:45:09 +0000
+++ src/Widgets/CategoryView.vala	2013-12-26 00:08:04 +0000
@@ -16,215 +16,206 @@
 //  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 //
 
-using Gtk;
-using Gee;
-
-using Slingshot.Backend;
-
-namespace Slingshot.Widgets {
-
-    public class CategoryView : EventBox {
-
-        private Gtk.Grid container;
-        public Sidebar category_switcher;
-        public VSeparator separator;
-        public Widgets.Grid app_view;
-        private Layout layout;
-        public Switcher switcher;
-        private SlingshotView view;
-        private Label empty_cat_label;
-
-        private Gtk.Grid page_switcher;
-
-        private const string ALL_APPLICATIONS = _("All Applications");
-        private const string NEW_FILTER = _("Create a new Filter");
-        private int current_position = 0;
-        private bool from_category = false;
-
-        public HashMap<int, string> category_ids = new HashMap<int, string> ();
-
-        public CategoryView (SlingshotView parent) {
-
-            view = parent;
-
-            set_visible_window (false);
-            setup_ui ();
-            setup_sidebar ();
-            connect_events ();
-
-            set_size_request (view.columns*130 + 17, view.view_height);
-
-        }
-
-        private void setup_ui () {
-            container = new Gtk.Grid ();
-            separator = new VSeparator ();
-
-            layout = new Layout (null, null);
-
-            app_view = new Widgets.Grid (view.rows, view.columns - 1);
-            layout.put (app_view, 0, 0);
-            empty_cat_label = new Gtk.Label ("");
-            layout.put (empty_cat_label, view.columns*130, view.rows * 130 / 2);
-            layout.set_hexpand (true);
-            layout.set_vexpand (true);
-
-            // Create the page switcher
-            switcher = new Switcher ();
-
-            // A bottom widget to keep the page switcher center
-            page_switcher = new Gtk.Grid ();
-            var bottom_separator1 = new Label (""); // A fake label
-            bottom_separator1.set_hexpand(true);
-            var bottom_separator2 = new Label (""); // A fake label
-            bottom_separator2.set_hexpand(true);
-            page_switcher.attach (bottom_separator1, 0, 0, 1, 1);
-            page_switcher.attach (switcher, 1, 0, 1, 1);
-            page_switcher.attach (bottom_separator2, 2, 0, 1, 1);
-
-            container.attach (separator, 1, 0, 1, 2);
-            container.attach (layout, 2, 0, 1, 1);
-
-            add (container);
-
-        }
-
-        public void setup_sidebar () {
-
-            if (category_switcher != null)
-                category_switcher.destroy ();
-
-            category_switcher = new Sidebar ();
-            category_switcher.can_focus = false;
-
-            // Fill the sidebar
-            int n = 0;
-
-            foreach (string cat_name in view.apps.keys) {
-                category_ids.set (n, cat_name);
-                category_switcher.add_category (GLib.dgettext ("gnome-menus-3.0", cat_name).dup ());
-                n++;
-            }
-
-            container.attach (category_switcher, 0, 0, 1, 2);
-            category_switcher.selection_changed.connect ((name, nth) => {
-
-                view.reset_category_focus ();
-                string category = category_ids.get (nth);
-                show_filtered_apps (category);
-            });
-
-            category_switcher.show_all ();
-        }
-
-        private void connect_events () {
-
-            layout.scroll_event.connect ((event) => {
-                switch (event.direction.to_string ()) {
-                    case "GDK_SCROLL_UP":
-                    case "GDK_SCROLL_LEFT":
-                        switcher.set_active (switcher.active - 1);
-                        break;
-                    case "GDK_SCROLL_DOWN":
-                    case "GDK_SCROLL_RIGHT":
-                        switcher.set_active (switcher.active + 1);
-                        break;
-                }
+public class Slingshot.Widgets.CategoryView : Gtk.EventBox {
+
+    private Gtk.Grid container;
+    public Sidebar category_switcher;
+    public Gtk.Separator separator;
+    public Widgets.Grid app_view;
+    private Gtk.Layout layout;
+    public Switcher switcher;
+    private SlingshotView view;
+    private Gtk.Label empty_cat_label;
+
+    private Gtk.Grid page_switcher;
+
+    private const string ALL_APPLICATIONS = _("All Applications");
+    private const string NEW_FILTER = _("Create a new Filter");
+    private int current_position = 0;
+    private bool from_category = false;
+
+    public Gee.HashMap<int, string> category_ids = new Gee.HashMap<int, string> ();
+
+    public CategoryView (SlingshotView parent) {
+
+        view = parent;
+
+        set_visible_window (false);
+        setup_ui ();
+        setup_sidebar ();
+        connect_events ();
+
+        set_size_request (view.columns*130 + 17, view.view_height);
+
+    }
+
+    private void setup_ui () {
+        container = new Gtk.Grid ();
+        separator = new Gtk.Separator (Gtk.Orientation.VERTICAL);
+
+        layout = new Gtk.Layout (null, null);
+
+        app_view = new Widgets.Grid (view.rows, view.columns - 1);
+        layout.put (app_view, 0, 0);
+        empty_cat_label = new Gtk.Label ("");
+        layout.put (empty_cat_label, view.columns*130, view.rows * 130 / 2);
+        layout.set_hexpand (true);
+        layout.set_vexpand (true);
+
+        // Create the page switcher
+        switcher = new Switcher ();
+
+        // A bottom widget to keep the page switcher center
+        page_switcher = new Gtk.Grid ();
+        var bottom_separator1 = new Gtk.Label (""); // A fake label
+        bottom_separator1.set_hexpand(true);
+        var bottom_separator2 = new Gtk.Label (""); // A fake label
+        bottom_separator2.set_hexpand(true);
+        page_switcher.attach (bottom_separator1, 0, 0, 1, 1);
+        page_switcher.attach (switcher, 1, 0, 1, 1);
+        page_switcher.attach (bottom_separator2, 2, 0, 1, 1);
+
+        container.attach (separator, 1, 0, 1, 2);
+        container.attach (layout, 2, 0, 1, 1);
+
+        add (container);
+
+    }
+
+    public void setup_sidebar () {
+
+        if (category_switcher != null)
+            category_switcher.destroy ();
+
+        category_switcher = new Sidebar ();
+        category_switcher.can_focus = false;
+
+        // Fill the sidebar
+        int n = 0;
+
+        foreach (string cat_name in view.apps.keys) {
+            category_ids.set (n, cat_name);
+            category_switcher.add_category (GLib.dgettext ("gnome-menus-3.0", cat_name).dup ());
+            n++;
+        }
+
+        container.attach (category_switcher, 0, 0, 1, 2);
+        category_switcher.selection_changed.connect ((name, nth) => {
+
+            view.reset_category_focus ();
+            string category = category_ids.get (nth);
+            show_filtered_apps (category);
+        });
+
+        category_switcher.show_all ();
+    }
+
+    private void connect_events () {
+
+        layout.scroll_event.connect ((event) => {
+            switch (event.direction.to_string ()) {
+                case "GDK_SCROLL_UP":
+                case "GDK_SCROLL_LEFT":
+                    switcher.set_active (switcher.active - 1);
+                    break;
+                case "GDK_SCROLL_DOWN":
+                case "GDK_SCROLL_RIGHT":
+                    switcher.set_active (switcher.active + 1);
+                    break;
+            }
+            return false;
+        });
+
+        app_view.new_page.connect ((page) => {
+
+            if (switcher.size == 0)
+                switcher.append ("1");
+            switcher.append (page);
+
+            /* Prevents pages from changing */
+            from_category = true;
+        });
+
+        switcher.active_changed.connect (() => {
+            if (from_category || switcher.active - switcher.old_active == 0) {
+                from_category = false;
+                return;
+            }
+
+            move_page (switcher.active - switcher.old_active);
+            view.searchbar.grab_focus (); // this is because otherwise focus isn't the current page
+        });
+
+        category_switcher.selected = 0; //Must be after everything else
+    }
+
+    private void add_app (Backend.App app) {
+
+        var app_entry = new AppEntry (app);
+        app_entry.app_launched.connect (() => view.hide ());
+        app_view.append (app_entry);
+        app_entry.show_all ();
+
+    }
+
+    public void show_filtered_apps (string category) {
+
+        switcher.clear_children ();
+        app_view.clear ();
+
+        layout.move (empty_cat_label, view.columns*130, view.rows*130 / 2);
+        foreach (Backend.App app in view.apps[category])
+            add_app (app);
+
+        switcher.set_active (0);
+
+        layout.move (app_view, 0, 0);
+        current_position = 0;
+
+    }
+
+    public void move_page (int step) {
+
+        debug ("Moving: step = " + step.to_string ());
+
+        if (step == 0)
+            return;
+        if (step < 0 && current_position >= 0) //Left border
+            return;
+        if (step > 0 && (-current_position) >= ((app_view.get_n_pages () - 1) * app_view.get_page_columns () * 130)) //Right border
+            return;
+
+        int count = 0;
+        int increment = -step*130*(view.columns-1)/10;
+        Timeout.add (30/(view.columns-1), () => {
+
+            if (count >= 10) {
+                current_position += -step*130*(view.columns-1) - 10*increment; //We adjust to end of the page
+                layout.move (app_view, current_position, 0);
                 return false;
-            });
-
-            app_view.new_page.connect ((page) => {
-
-                if (switcher.size == 0)
-                    switcher.append ("1");
-                switcher.append (page);
-
-                /* Prevents pages from changing */
-                from_category = true;
-            });
-
-            switcher.active_changed.connect (() => {
-                if (from_category || switcher.active - switcher.old_active == 0) {
-                    from_category = false;
-                    return;
-                }
-
-                move_page (switcher.active - switcher.old_active);
-                view.searchbar.grab_focus (); // this is because otherwise focus isn't the current page
-            });
-
-            category_switcher.selected = 0; //Must be after everything else
-        }
-
-        private void add_app (App app) {
-
-            var app_entry = new AppEntry (app);
-            app_entry.app_launched.connect (() => view.hide ());
-            app_view.append (app_entry);
-            app_entry.show_all ();
-
-        }
-
-        public void show_filtered_apps (string category) {
-
-            switcher.clear_children ();
-            app_view.clear ();
-
-            layout.move (empty_cat_label, view.columns*130, view.rows*130 / 2);
-            foreach (App app in view.apps[category])
-                add_app (app);
-
-            switcher.set_active (0);
-
-            layout.move (app_view, 0, 0);
-            current_position = 0;
-
-        }
-
-        public void move_page (int step) {
-
-            debug ("Moving: step = " + step.to_string ());
-
-            if (step == 0)
-                return;
-            if (step < 0 && current_position >= 0) //Left border
-                return;
-            if (step > 0 && (-current_position) >= ((app_view.get_n_pages () - 1) * app_view.get_page_columns () * 130)) //Right border
-                return;
-
-            int count = 0;
-            int increment = -step*130*(view.columns-1)/10;
-            Timeout.add (30/(view.columns-1), () => {
-
-                if (count >= 10) {
-                    current_position += -step*130*(view.columns-1) - 10*increment; //We adjust to end of the page
-                    layout.move (app_view, current_position, 0);
-                    return false;
-                }
-
-                current_position += increment;
-                layout.move (app_view, current_position, 0);
-                count++;
-                return true;
-
-            }, Priority.DEFAULT_IDLE);
-        }
-
-        public void show_page_switcher (bool show) {
-
-            if (page_switcher.get_parent () == null)
-                container.attach (page_switcher, 2, 1, 1, 1);
-
-            if (show) {
-                page_switcher.show_all ();
-                view.bottom.hide ();
             }
-            else
-                page_switcher.hide ();
-
-            view.searchbar.grab_focus ();
-
+
+            current_position += increment;
+            layout.move (app_view, current_position, 0);
+            count++;
+            return true;
+
+        }, Priority.DEFAULT_IDLE);
+    }
+
+    public void show_page_switcher (bool show) {
+
+        if (page_switcher.get_parent () == null)
+            container.attach (page_switcher, 2, 1, 1, 1);
+
+        if (show) {
+            page_switcher.show_all ();
+            view.bottom.hide ();
         }
+        else
+            page_switcher.hide ();
+
+        view.searchbar.grab_focus ();
 
     }
 

=== modified file 'src/Widgets/Grid.vala'
--- src/Widgets/Grid.vala	2012-08-21 17:02:33 +0000
+++ src/Widgets/Grid.vala	2013-12-26 00:08:04 +0000
@@ -16,8 +16,6 @@
 //  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 //
 
-using Gtk;
-
 namespace Slingshot.Widgets {
 
     struct Page {
@@ -49,7 +47,7 @@
 
         }
 
-        public void append (Widget widget) {
+        public void append (Gtk.Widget widget) {
 
             update_position ();
 
@@ -76,7 +74,7 @@
 
         public void clear () {
 
-            foreach (Widget widget in get_children ()) {
+            foreach (Gtk.Widget widget in get_children ()) {
                 if (widget.get_parent () != null)
                     remove (widget);
                 widget.destroy ();
@@ -108,7 +106,7 @@
 
         public void fade_all_out () {
 
-            foreach (Widget widget in get_children ()) {
+            foreach (Gtk.Widget widget in get_children ()) {
                 ((AppEntry) widget).fade_out ();
             }
 
@@ -116,7 +114,7 @@
 
         public void fade_all_in () {
 
-            foreach (Widget widget in get_children ()) {
+            foreach (Gtk.Widget widget in get_children ()) {
                 ((AppEntry) widget).fade_in ();
             }
 
@@ -133,4 +131,4 @@
 
     }
 
-}
+}
\ No newline at end of file

=== modified file 'src/Widgets/SearchItem.vala'
--- src/Widgets/SearchItem.vala	2013-08-21 07:34:53 +0000
+++ src/Widgets/SearchItem.vala	2013-12-26 00:08:04 +0000
@@ -16,18 +16,15 @@
 //  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 //
 
-using Gtk;
-using Gdk;
-
 namespace Slingshot.Widgets {
 
-    public class SearchItem : Button {
+    public class SearchItem : Gtk.Button {
 
         private Backend.App app;
-        private Pixbuf icon;
+        private Gdk.Pixbuf icon;
         private string icon_name;
-        private Label name_label;
-        private Label desc_label;
+        private Gtk.Label name_label;
+        private Gtk.Label desc_label;
 
         public bool in_box = false;
         public int icon_size = 64;
@@ -40,16 +37,16 @@
             icon = app.icon;
             icon_name = app.icon_name;
 
-            name_label = new Label ("<b><span size=\"larger\">" + fix (app.name) + "</span></b>");
+            name_label = new Gtk.Label ("<b><span size=\"larger\">" + fix (app.name) + "</span></b>");
             name_label.set_ellipsize (Pango.EllipsizeMode.END);
             name_label.use_markup = true;
             name_label.xalign = 0.0f;
 
-            desc_label = new Label (fix (app.description));
+            desc_label = new Gtk.Label (fix (app.description));
             desc_label.set_ellipsize (Pango.EllipsizeMode.END);
             desc_label.xalign = 0.0f;
 
-            var vbox = new Box (Orientation.VERTICAL, 0);
+            var vbox = new Gtk.Box (Gtk.Orientation.VERTICAL, 0);
             vbox.homogeneous = false;
             vbox.pack_start (name_label, false, true, 0);
             vbox.pack_start (desc_label, false, true, 0);
@@ -60,17 +57,17 @@
         }
 
         protected override bool draw (Cairo.Context cr) {
-            Allocation size;
+            Gtk.Allocation size;
             get_allocation (out size);
 
             base.draw (cr);
 
-            Pixbuf scaled_icon = app.load_icon (icon_size);
+            Gdk.Pixbuf scaled_icon = app.load_icon (icon_size);
 
             height_request = icon_size + 10;
 
             // Draw icon
-            cairo_set_source_pixbuf (cr, scaled_icon, 74 - icon_size, 5);
+            Gdk.cairo_set_source_pixbuf (cr, scaled_icon, 74 - icon_size, 5);
             cr.paint ();
 
             return true;
@@ -81,4 +78,4 @@
         }
     }
 
-}
+}
\ No newline at end of file

=== modified file 'src/Widgets/SearchView.vala'
--- src/Widgets/SearchView.vala	2012-09-09 18:14:52 +0000
+++ src/Widgets/SearchView.vala	2013-12-26 00:08:04 +0000
@@ -16,20 +16,20 @@
 //  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 //
 
-using Gtk;
-using Slingshot.Backend;
-
 namespace Slingshot.Widgets {
 
-    private class SeparatorItem : HSeparator {
+    private class SeparatorItem : Gtk.Separator {
+        public SeparatorItem () {
+            orientation = Gtk.Orientation.HORIZONTAL;
+        }
 
         public bool in_box;
 
     }
 
-    public class SearchView : VBox {
+    public class SearchView : Gtk.Box {
 
-        private Gee.HashMap<App, SearchItem> items;
+        private Gee.HashMap<Backend.App, SearchItem> items;
         private SeparatorItem separator;
         private SearchItem selected_app = null;
 
@@ -63,6 +63,7 @@
         private SlingshotView view;
 
         public SearchView (SlingshotView parent) {
+            orientation = Gtk.Orientation.VERTICAL;
 
             can_focus = true;
             homogeneous = false;
@@ -70,14 +71,14 @@
             this.view = parent;
             width_request = view.columns * 130;
 
-            items = new Gee.HashMap<App, SearchItem> ();
+            items = new Gee.HashMap<Backend.App, SearchItem> ();
             separator = new SeparatorItem ();
 
         }
 
-        public void add_apps (Gee.ArrayList<App> apps) {
+        public void add_apps (Gee.ArrayList<Backend.App> apps) {
 
-            foreach (App app in apps) {
+            foreach (Backend.App app in apps) {
                 var search_item = new SearchItem (app);
 
                 append_app (app, search_item);
@@ -86,7 +87,7 @@
 
         }
 
-        public void append_app (App app, SearchItem search_item) {
+        public void append_app (Backend.App app, SearchItem search_item) {
 
             search_item.button_release_event.connect (() => {
                 app.launch ();
@@ -98,7 +99,7 @@
 
         }
 
-        public void show_app (App app) {
+        public void show_app (Backend.App app) {
 
             if (!(app in items.keys)) {
                 var search_item = new SearchItem (app);
@@ -128,7 +129,7 @@
 
         }
 
-        public void hide_app (App app) {
+        public void hide_app (Backend.App app) {
 
             items[app].hide ();
             apps_showed--;
@@ -151,7 +152,7 @@
 
         public void add_command (string command) {
 
-            var app = new App.from_command (command);
+            var app = new Backend.App.from_command (command);
             var item = new SearchItem (app);
 
             append_app (app, item);
@@ -182,10 +183,10 @@
         private void select_nth (int index) {
 
             if (selected_app != null)
-                selected_app.unset_state_flags (StateFlags.PRELIGHT);
+                selected_app.unset_state_flags (Gtk.StateFlags.PRELIGHT);
 
             selected_app = (SearchItem) get_children ().nth_data (index);
-            selected_app.set_state_flags (StateFlags.PRELIGHT, false);
+            selected_app.set_state_flags (Gtk.StateFlags.PRELIGHT, false);
 
         }
 
@@ -197,4 +198,4 @@
 
     }
 
-}
+}
\ No newline at end of file

=== modified file 'src/Widgets/Sidebar.vala'
--- src/Widgets/Sidebar.vala	2012-09-15 15:14:52 +0000
+++ src/Widgets/Sidebar.vala	2013-12-26 00:08:04 +0000
@@ -16,124 +16,118 @@
 //  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 //
 
-using Gtk;
-
-namespace Slingshot.Widgets {
-
-    public class Sidebar : TreeView {
-
-        private TreeStore store;
-
-        private TreeIter entry_iter;
-
-        public int cat_size {
-            get {
-                return store.iter_n_children (null);
-            }
-        }
-
-        private int _selected;
-        public int selected {
-            get {
-                return _selected;
-            }
-            set {
-                if (value >= 0 && value < cat_size) {
-                    select_nth (value);
-                    _selected = value;
-                }
-            }
-        }
-
-        private enum Columns {
-            INT,
-            TEXT,
-            N_COLUMNS
-        }
-
-        public signal void selection_changed (string entry_name, int nth);
-
-        public Sidebar () {
-
-            store = new TreeStore (Columns.N_COLUMNS, typeof (int), typeof (string));
-            store.set_sort_column_id (1, Gtk.SortType.ASCENDING);
-            set_model (store);
-
-            set_headers_visible (false);
-            set_show_expanders (false);
-            set_level_indentation (8);
-
-            set_size_request (145, -1);
-            get_style_context ().add_class ("sidebar");
-
-            var cell = new CellRendererText ();
-            cell.wrap_mode = Pango.WrapMode.WORD;
-            cell.wrap_width = 110;
-            cell.xpad = 17;
-
-            insert_column_with_attributes (-1, "Filters", cell, "markup", Columns.TEXT);
-
-            get_selection ().set_mode (SelectionMode.SINGLE);
-            get_selection ().changed.connect (selection_change);
-
-        }
-
-        public void add_category (string entry_name) {
-
-            store.append (out entry_iter, null);
-            store.set (entry_iter, Columns.INT, cat_size - 1, Columns.TEXT, Markup.escape_text (entry_name), -1);
-
-            expand_all ();
-
-        }
-
-        public void selection_change () {
-
-            TreeModel model;
-            TreeIter sel_iter;
-            string name;
-            int nth;
-
-            if (get_selection ().get_selected (out model, out sel_iter)) {
-                store.get (sel_iter, Columns.INT, out nth, Columns.TEXT, out name);
-                _selected = nth;
-                selection_changed (name, nth);
-            }
-
-        }
-
-        public bool select_nth (int nth) {
-
-            TreeIter iter;
-
-            if (nth < cat_size)
-                store.iter_nth_child (out iter, null, nth);
-            else
-                return false;
-
-            get_selection ().select_iter (iter);
-            return true;
-
-        }
-
-        protected override bool scroll_event (Gdk.EventScroll event) {
-
-            switch (event.direction.to_string ()) {
-                case "GDK_SCROLL_UP":
-                case "GDK_SCROLL_LEFT":
-                    selected--;
-                    break;
-                case "GDK_SCROLL_DOWN":
-                case "GDK_SCROLL_RIGHT":
-                    selected++;
-                    break;
-
-            }
-
+public class Slingshot.Widgets.Sidebar : Gtk.TreeView {
+
+    private Gtk.TreeStore store;
+
+    private Gtk.TreeIter entry_iter;
+
+    public int cat_size {
+        get {
+            return store.iter_n_children (null);
+        }
+    }
+
+    private int _selected;
+    public int selected {
+        get {
+            return _selected;
+        }
+        set {
+            if (value >= 0 && value < cat_size) {
+                select_nth (value);
+                _selected = value;
+            }
+        }
+    }
+
+    private enum Columns {
+        INT,
+        TEXT,
+        N_COLUMNS
+    }
+
+    public signal void selection_changed (string entry_name, int nth);
+
+    public Sidebar () {
+
+        store = new Gtk.TreeStore (Columns.N_COLUMNS, typeof (int), typeof (string));
+        store.set_sort_column_id (1, Gtk.SortType.ASCENDING);
+        set_model (store);
+
+        set_headers_visible (false);
+        set_show_expanders (false);
+        set_level_indentation (8);
+
+        set_size_request (145, -1);
+        get_style_context ().add_class ("sidebar");
+
+        var cell = new Gtk.CellRendererText ();
+        cell.wrap_mode = Pango.WrapMode.WORD;
+        cell.wrap_width = 110;
+        cell.xpad = 17;
+
+        insert_column_with_attributes (-1, "Filters", cell, "markup", Columns.TEXT);
+
+        get_selection ().set_mode (Gtk.SelectionMode.SINGLE);
+        get_selection ().changed.connect (selection_change);
+
+    }
+
+    public void add_category (string entry_name) {
+
+        store.append (out entry_iter, null);
+        store.set (entry_iter, Columns.INT, cat_size - 1, Columns.TEXT, Markup.escape_text (entry_name), -1);
+
+        expand_all ();
+
+    }
+
+    public void selection_change () {
+
+        Gtk.TreeModel model;
+        Gtk.TreeIter sel_iter;
+        string name;
+        int nth;
+
+        if (get_selection ().get_selected (out model, out sel_iter)) {
+            store.get (sel_iter, Columns.INT, out nth, Columns.TEXT, out name);
+            _selected = nth;
+            selection_changed (name, nth);
+        }
+
+    }
+
+    public bool select_nth (int nth) {
+
+        Gtk.TreeIter iter;
+
+        if (nth < cat_size)
+            store.iter_nth_child (out iter, null, nth);
+        else
             return false;
 
+        get_selection ().select_iter (iter);
+        return true;
+
+    }
+
+    protected override bool scroll_event (Gdk.EventScroll event) {
+
+        switch (event.direction.to_string ()) {
+            case "GDK_SCROLL_UP":
+            case "GDK_SCROLL_LEFT":
+                selected--;
+                break;
+            case "GDK_SCROLL_DOWN":
+            case "GDK_SCROLL_RIGHT":
+                selected++;
+                break;
+
         }
 
+        return false;
+
     }
 
 }

